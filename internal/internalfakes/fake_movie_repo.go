// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"meowvie/internal"
	"sync"

	"github.com/rs/xid"
)

type FakeMovieRepo struct {
	CreateStub        func(*internal.Movie) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 *internal.Movie
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(xid.ID) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 xid.ID
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	FindStub        func(xid.ID) (*internal.Movie, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		arg1 xid.ID
	}
	findReturns struct {
		result1 *internal.Movie
		result2 error
	}
	findReturnsOnCall map[int]struct {
		result1 *internal.Movie
		result2 error
	}
	FindAllStub        func([]xid.ID) ([]*internal.Movie, error)
	findAllMutex       sync.RWMutex
	findAllArgsForCall []struct {
		arg1 []xid.ID
	}
	findAllReturns struct {
		result1 []*internal.Movie
		result2 error
	}
	findAllReturnsOnCall map[int]struct {
		result1 []*internal.Movie
		result2 error
	}
	GetAllStub        func() (chan *internal.Movie, error)
	getAllMutex       sync.RWMutex
	getAllArgsForCall []struct {
	}
	getAllReturns struct {
		result1 chan *internal.Movie
		result2 error
	}
	getAllReturnsOnCall map[int]struct {
		result1 chan *internal.Movie
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMovieRepo) Create(arg1 *internal.Movie) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 *internal.Movie
	}{arg1})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMovieRepo) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeMovieRepo) CreateCalls(stub func(*internal.Movie) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeMovieRepo) CreateArgsForCall(i int) *internal.Movie {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMovieRepo) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMovieRepo) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMovieRepo) Delete(arg1 xid.ID) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 xid.ID
	}{arg1})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMovieRepo) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeMovieRepo) DeleteCalls(stub func(xid.ID) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeMovieRepo) DeleteArgsForCall(i int) xid.ID {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMovieRepo) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMovieRepo) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMovieRepo) Find(arg1 xid.ID) (*internal.Movie, error) {
	fake.findMutex.Lock()
	ret, specificReturn := fake.findReturnsOnCall[len(fake.findArgsForCall)]
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		arg1 xid.ID
	}{arg1})
	stub := fake.FindStub
	fakeReturns := fake.findReturns
	fake.recordInvocation("Find", []interface{}{arg1})
	fake.findMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMovieRepo) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeMovieRepo) FindCalls(stub func(xid.ID) (*internal.Movie, error)) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = stub
}

func (fake *FakeMovieRepo) FindArgsForCall(i int) xid.ID {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	argsForCall := fake.findArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMovieRepo) FindReturns(result1 *internal.Movie, result2 error) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 *internal.Movie
		result2 error
	}{result1, result2}
}

func (fake *FakeMovieRepo) FindReturnsOnCall(i int, result1 *internal.Movie, result2 error) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = nil
	if fake.findReturnsOnCall == nil {
		fake.findReturnsOnCall = make(map[int]struct {
			result1 *internal.Movie
			result2 error
		})
	}
	fake.findReturnsOnCall[i] = struct {
		result1 *internal.Movie
		result2 error
	}{result1, result2}
}

func (fake *FakeMovieRepo) FindAll(arg1 []xid.ID) ([]*internal.Movie, error) {
	var arg1Copy []xid.ID
	if arg1 != nil {
		arg1Copy = make([]xid.ID, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.findAllMutex.Lock()
	ret, specificReturn := fake.findAllReturnsOnCall[len(fake.findAllArgsForCall)]
	fake.findAllArgsForCall = append(fake.findAllArgsForCall, struct {
		arg1 []xid.ID
	}{arg1Copy})
	stub := fake.FindAllStub
	fakeReturns := fake.findAllReturns
	fake.recordInvocation("FindAll", []interface{}{arg1Copy})
	fake.findAllMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMovieRepo) FindAllCallCount() int {
	fake.findAllMutex.RLock()
	defer fake.findAllMutex.RUnlock()
	return len(fake.findAllArgsForCall)
}

func (fake *FakeMovieRepo) FindAllCalls(stub func([]xid.ID) ([]*internal.Movie, error)) {
	fake.findAllMutex.Lock()
	defer fake.findAllMutex.Unlock()
	fake.FindAllStub = stub
}

func (fake *FakeMovieRepo) FindAllArgsForCall(i int) []xid.ID {
	fake.findAllMutex.RLock()
	defer fake.findAllMutex.RUnlock()
	argsForCall := fake.findAllArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMovieRepo) FindAllReturns(result1 []*internal.Movie, result2 error) {
	fake.findAllMutex.Lock()
	defer fake.findAllMutex.Unlock()
	fake.FindAllStub = nil
	fake.findAllReturns = struct {
		result1 []*internal.Movie
		result2 error
	}{result1, result2}
}

func (fake *FakeMovieRepo) FindAllReturnsOnCall(i int, result1 []*internal.Movie, result2 error) {
	fake.findAllMutex.Lock()
	defer fake.findAllMutex.Unlock()
	fake.FindAllStub = nil
	if fake.findAllReturnsOnCall == nil {
		fake.findAllReturnsOnCall = make(map[int]struct {
			result1 []*internal.Movie
			result2 error
		})
	}
	fake.findAllReturnsOnCall[i] = struct {
		result1 []*internal.Movie
		result2 error
	}{result1, result2}
}

func (fake *FakeMovieRepo) GetAll() (chan *internal.Movie, error) {
	fake.getAllMutex.Lock()
	ret, specificReturn := fake.getAllReturnsOnCall[len(fake.getAllArgsForCall)]
	fake.getAllArgsForCall = append(fake.getAllArgsForCall, struct {
	}{})
	stub := fake.GetAllStub
	fakeReturns := fake.getAllReturns
	fake.recordInvocation("GetAll", []interface{}{})
	fake.getAllMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMovieRepo) GetAllCallCount() int {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	return len(fake.getAllArgsForCall)
}

func (fake *FakeMovieRepo) GetAllCalls(stub func() (chan *internal.Movie, error)) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = stub
}

func (fake *FakeMovieRepo) GetAllReturns(result1 chan *internal.Movie, result2 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	fake.getAllReturns = struct {
		result1 chan *internal.Movie
		result2 error
	}{result1, result2}
}

func (fake *FakeMovieRepo) GetAllReturnsOnCall(i int, result1 chan *internal.Movie, result2 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	if fake.getAllReturnsOnCall == nil {
		fake.getAllReturnsOnCall = make(map[int]struct {
			result1 chan *internal.Movie
			result2 error
		})
	}
	fake.getAllReturnsOnCall[i] = struct {
		result1 chan *internal.Movie
		result2 error
	}{result1, result2}
}

func (fake *FakeMovieRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	fake.findAllMutex.RLock()
	defer fake.findAllMutex.RUnlock()
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMovieRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.MovieRepo = new(FakeMovieRepo)
