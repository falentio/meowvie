// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"meowvie/internal"
	"sync"
)

type FakeSearch struct {
	InsertStub        func(string, string) error
	insertMutex       sync.RWMutex
	insertArgsForCall []struct {
		arg1 string
		arg2 string
	}
	insertReturns struct {
		result1 error
	}
	insertReturnsOnCall map[int]struct {
		result1 error
	}
	InsertBatchStub        func([]*internal.SearchInsertItem) error
	insertBatchMutex       sync.RWMutex
	insertBatchArgsForCall []struct {
		arg1 []*internal.SearchInsertItem
	}
	insertBatchReturns struct {
		result1 error
	}
	insertBatchReturnsOnCall map[int]struct {
		result1 error
	}
	QueryStub        func(string) ([]string, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		arg1 string
	}
	queryReturns struct {
		result1 []string
		result2 error
	}
	queryReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSearch) Insert(arg1 string, arg2 string) error {
	fake.insertMutex.Lock()
	ret, specificReturn := fake.insertReturnsOnCall[len(fake.insertArgsForCall)]
	fake.insertArgsForCall = append(fake.insertArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.InsertStub
	fakeReturns := fake.insertReturns
	fake.recordInvocation("Insert", []interface{}{arg1, arg2})
	fake.insertMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSearch) InsertCallCount() int {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	return len(fake.insertArgsForCall)
}

func (fake *FakeSearch) InsertCalls(stub func(string, string) error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = stub
}

func (fake *FakeSearch) InsertArgsForCall(i int) (string, string) {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	argsForCall := fake.insertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSearch) InsertReturns(result1 error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	fake.insertReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSearch) InsertReturnsOnCall(i int, result1 error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	if fake.insertReturnsOnCall == nil {
		fake.insertReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.insertReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSearch) InsertBatch(arg1 []*internal.SearchInsertItem) error {
	var arg1Copy []*internal.SearchInsertItem
	if arg1 != nil {
		arg1Copy = make([]*internal.SearchInsertItem, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.insertBatchMutex.Lock()
	ret, specificReturn := fake.insertBatchReturnsOnCall[len(fake.insertBatchArgsForCall)]
	fake.insertBatchArgsForCall = append(fake.insertBatchArgsForCall, struct {
		arg1 []*internal.SearchInsertItem
	}{arg1Copy})
	stub := fake.InsertBatchStub
	fakeReturns := fake.insertBatchReturns
	fake.recordInvocation("InsertBatch", []interface{}{arg1Copy})
	fake.insertBatchMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSearch) InsertBatchCallCount() int {
	fake.insertBatchMutex.RLock()
	defer fake.insertBatchMutex.RUnlock()
	return len(fake.insertBatchArgsForCall)
}

func (fake *FakeSearch) InsertBatchCalls(stub func([]*internal.SearchInsertItem) error) {
	fake.insertBatchMutex.Lock()
	defer fake.insertBatchMutex.Unlock()
	fake.InsertBatchStub = stub
}

func (fake *FakeSearch) InsertBatchArgsForCall(i int) []*internal.SearchInsertItem {
	fake.insertBatchMutex.RLock()
	defer fake.insertBatchMutex.RUnlock()
	argsForCall := fake.insertBatchArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSearch) InsertBatchReturns(result1 error) {
	fake.insertBatchMutex.Lock()
	defer fake.insertBatchMutex.Unlock()
	fake.InsertBatchStub = nil
	fake.insertBatchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSearch) InsertBatchReturnsOnCall(i int, result1 error) {
	fake.insertBatchMutex.Lock()
	defer fake.insertBatchMutex.Unlock()
	fake.InsertBatchStub = nil
	if fake.insertBatchReturnsOnCall == nil {
		fake.insertBatchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.insertBatchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSearch) Query(arg1 string) ([]string, error) {
	fake.queryMutex.Lock()
	ret, specificReturn := fake.queryReturnsOnCall[len(fake.queryArgsForCall)]
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.QueryStub
	fakeReturns := fake.queryReturns
	fake.recordInvocation("Query", []interface{}{arg1})
	fake.queryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSearch) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *FakeSearch) QueryCalls(stub func(string) ([]string, error)) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = stub
}

func (fake *FakeSearch) QueryArgsForCall(i int) string {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	argsForCall := fake.queryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSearch) QueryReturns(result1 []string, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeSearch) QueryReturnsOnCall(i int, result1 []string, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	if fake.queryReturnsOnCall == nil {
		fake.queryReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.queryReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeSearch) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	fake.insertBatchMutex.RLock()
	defer fake.insertBatchMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSearch) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.Search = new(FakeSearch)
